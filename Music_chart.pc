
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>
#include <Windows.h>
#include <time.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


void DB_connect();
void Get_Music_tuple(); // 음원 검색
void start(); // 스타트 화면
void choice_menu(); // 초기 메뉴 선택
void id_start(); // 회원가입
void login(); // 로그인
void year_chart(); // 연도별 차트
void genre_chart(); // 장르별 차트
void top_chart(); // top 20 차트
void sql_error(char *msg) ;

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

// win32 Visual C 컴파일시 추가
#define getch() _getch()

void main()
{
	int num;
	DB_connect();
	
	
    
    do {
        start(); /* 인트로 */
        choice_menu();
        scanf("%d", &num);
        if (num != 1 && num != 2)
      {
         num = 3;
      }

        while(getchar()!='\n')
      {
         num = 3;
      };


        // 사용자 입력
        switch (num) {
		case 1:
			system("cls");
			printf("●로그인●\n");
			login();		
			break;
		case 2:
			system("cls");
			printf("●회원가입 페이지●\n");
			id_start();
			main();
			break;
		default:
			printf("다시 입력해주세요.");
        }
	} while (num > 2);

	    printf("                     프로그램을 종료합니다.\n\n");
            printf("               감사합니다. 다음에 또 이용해 주세요. (__)\n");
	EXEC SQL COMMIT WORK RELEASE ;
	getch();
}
void DB_connect()
{
   /* 본인 계정이름으로 바꾸어 쓸 것 */
   strcpy((char *)uid.arr,"b20163332@//sedb.deu.ac.kr:1521/orcl");
   uid.len = (short) strlen((char *)uid.arr);
   /* 본인 계정 암호로 바꾸어 쓸 것 */
   strcpy((char *)pwd.arr,"20163332");
   pwd.len = (short) strlen((char *)pwd.arr);

   EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

	// connection이 실패했을경우의 처리부분

	if (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405){ 
		printf("\7Connect error: %s", sqlca.sqlerrm.sqlerrmc);
		getch();
		exit(-1);
	}

    printf("Oracle Connect SUCCESS by %s\n", uid.arr);
}

void start()
{
    Sleep(1500);
	system("cls"); /* 화면 clear */
	printf("\n");
	printf(" ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★\n");
	printf(" ★                                                                                              ★\n");
	printf(" ★                                                                                              ★\n");
	printf(" ★                                                                                              ★\n");
	printf(" ★   ■■            ■■   ■          ■   ■■■■■■■   ■■■■■■■   ■■■■■■■   ★\n");
	printf(" ★   ■ ■          ■ ■   ■          ■   ■                     ■         ■          ■   ★\n");
	printf(" ★   ■  ■        ■  ■   ■          ■   ■                     ■         ■          ■   ★\n");
	printf(" ★   ■   ■      ■   ■   ■          ■   ■                     ■         ■               ★\n");
	printf(" ★   ■    ■    ■    ■   ■          ■   ■                     ■         ■               ★\n");
	printf(" ★   ■     ■  ■     ■   ■          ■   ■■■■■■■         ■	        ■               ★\n");
	printf(" ★   ■      ■■      ■   ■          ■               ■         ■	        ■               ★\n");
	printf(" ★   ■       ■       ■   ■          ■               ■         ■	        ■               ★\n");
	printf(" ★   ■                ■   ■          ■               ■         ■         ■          ■   ★\n");
	printf(" ★   ■                ■   ■          ■               ■         ■	        ■          ■   ★\n");
	printf(" ★   ■                ■   ■■■■■■■   ■■■■■■■   ■■■■■■■	■■■■■■■   ★\n");
	printf(" ★                                                                                              ★\n");
	printf(" ★                                                                                              ★\n");
	printf(" ★                                                                                              ★\n");
	printf(" ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★\n");
	printf("\n");
}

void  choice_menu() {
    printf("                                            ☞  1. 로그인  ☜\n\n\n\n\n");
    printf("                                            ☞  2. 회원가입  ☜\n\n\n");
    printf("                    ☞ 번호를 입력하세요 : ");
}

void id_start()
{
EXEC SQL BEGIN DECLARE SECTION;
         char u_uid[20]= {""};
         char u_id_check[20] = {""};
         char u_id_payment_check[20] = {""};
         char u_pw_check[20] = {""};
	 char u_name[10] = {""};
	 char u_jumin [20] = {""};
	 char u_phonenumber [20]= {""};
         char u_check[20]={""};
         char u_upd[20];
         char u_uage[10];
EXEC SQL END DECLARE SECTION;

         printf("아이디를 입력하세요 : ");
         scanf("%s", u_uid);
         printf("비밀번호를 입력하세요 : ");
         scanf("%s", u_upd);
         printf("나이를 입력하세요 : ");
         scanf("%s", u_uage);
	 printf("이름을 입력하세요 : ");
	 scanf("%s", u_name);
 	 printf("주민번호를 입력하세요 : ");
	 scanf("%s", u_jumin);
 	 printf("전화번호를 입력하세요: ");
	 scanf("%s", u_phonenumber);
         printf("\n");



EXEC SQL SELECT user_id
                into :u_check
         from customer
         where user_id = :u_uid;

         // 0이 똑같어 1이 u_check가 크고, -1 u_uid가 크다.
         // 확인시에 같은 값이 찍히지만 그럴 경우 u_check가 더 크다는것을 확인하여서 적용하였다.
         if (strcmp(u_check, u_uid) == 1)
         {
            printf("중복되는 아이디가 이미 존재합니다!\n\n");
            printf("다시 회원가입을 시도해 주세요!\n\n");
         }
         else
         {
         id_start:
            EXEC SQL INSERT INTO CUSTOMER(USER_ID, USER_PWD, USER_AGE,USER_PHONENUMBER, USER_JUMIN, USER_NAME)
                    VALUES (:u_uid, :u_upd, :u_uage, :u_name, :u_jumin, :u_phonenumber);

            EXEC SQL COMMIT WORK;

            printf("회원 가입에 성공하였습니다!\n\n");
         }

         getch();

}

void login()
{
EXEC SQL BEGIN DECLARE SECTION;
         char u_uid[20]= {""};
         char u_id_check[20] = {""};
         char u_id_payment_check[20] = {""};
         char u_pw_check[20] = {""};
         char u_check[20]={""};
         char u_upd[20];
         char u_uage[10];
      EXEC SQL END DECLARE SECTION;

         int login_choice;
         printf("아이디를 입력하세요 : ");
         scanf("%s", u_uid);
         printf("비밀번호를 입력하세요 : ");
         scanf("%s", u_upd);
         printf("\n");


         EXEC SQL SELECT USER_ID, USER_PWD
               into :u_id_check, :u_pw_check
               from customer
               where USER_ID = :u_uid and USER_PWD = :u_upd;

         if (strcmp(u_id_check, u_uid) == 1 && strcmp(u_pw_check, u_upd) == 1)
         {
            printf("로그인에 성공하였습니다!\n\n");
            printf("%s님 환영합니다.\n\n", u_uid);
         }                     
         else
         {
            printf("아이디 또는 비밀번호가 잘못되었습니다. 다시 시도해 주세요.\n");
            getch();
         }
         do {
	printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
            printf("\n☞  메뉴를 선택해 주세요.  ☜\n\n");
            printf("1. 음원차트 ★TOP 30★\n");
            printf("2. 장르별 차트\n");
            printf("3. 음원 검색\n");
            printf("4. 연대별 추억의 가요\n");
            printf("5. ♥로그아웃♥\n\n");
	    printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
            printf("\n선 택 : ");

            
            scanf("%d", &login_choice);

            // 1~4가 아닌 숫자를 사용자가 입력했을 시, 프로그램이 종료되게 함.
            if (login_choice != 1 && login_choice != 2 && login_choice != 3 && login_choice != 4)
            {
               login_choice = 5;
            }

            // 숫자가 아닌 문자가 입력되었을 경우 프로그램이 종료되게 함.
            while(getchar()!='\n')
            {
               login_choice = 5;
            };

	switch(login_choice)
	{
	case 1: //음원 차트
		top_chart();
		break;
	case 2: // 장르별 차트
		genre_chart();
		break;
	case 3: //음원 검색
		Get_Music_tuple();
		break;
	case 4: // 연대별 추억의 가요
		year_chart();
		break;
	case 5: // 로그아웃
               printf("\n로그아웃 합니다.\n안녕히 가세요\n");
               break;
            }
         } while(login_choice != 5);

         getch();
}

void year_chart()
{

int y_select = 0;
int sc_select = 0;

EXEC SQL BEGIN DECLARE SECTION;
	int  m_num; /*노래 등록 번호*/
	char m_title[30] = { "" }; /*노래 제목*/
	char m_singer[20] = { "" }; /* 가수 */
	char m_releasedate[50] = { "" };
	char m_genre[10] = { "" }; /*장르*/
	char m_album[20] = { "" }; /*앨범이름*/
	int m_playcount; /*재생 빈도수*/

	short m_title_ind = 0;
	short m_singer_ind = 0;
	short m_genre_ind = 0;
	short m_releasedate_ind = 0;

EXEC SQL END DECLARE SECTION;

    
do{
	printf("──────────연도별 차트 ────────── \n");
	printf("연도를 선택하세요 \n");
	printf("──────────────────────────\n");
	printf(" 1. 1990년대 \n");
	printf(" 2. 2000년대 \n");
	printf(" 3. 2010년대 \n");
	printf(" 4. 2020년대 최신가요  \n");
	printf(" 5. 이전 메뉴로 돌아가기\n");
	printf("──────────────────────────\n");
	scanf("%d",&y_select);

// 1~4가 아닌 숫자를 사용자가 입력했을 시, 프로그램이 종료되게 함.
            if (y_select != 1 && y_select != 2 && y_select != 3 && y_select != 4)
            {
               y_select = 5;
            }

            // 숫자가 아닌 문자가 입력되었을 경우 프로그램이 종료되게 함.
            while(getchar()!='\n')
            {
               y_select = 5;
            };


          switch(y_select){
	case 1:
	system("cls");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("                    1990년도 가요 차트                  \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
	
		EXEC SQL DECLARE m_year_chart_a CURSOR FOR
		select Music_Title, Music_Singer, Music_Genre, Music_releasedate
		from music
		where substr(Music_releasedate,3,2)  between 90 and 99
		order by Music_releasedate ;
	

		EXEC SQL OPEN m_year_chart_a;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_year_chart_a INTO
		:m_title: m_title_ind, :m_singer :m_singer_ind, :m_genre :m_genre_ind, :m_releasedate :m_releasedate_ind;
		
		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("발매날짜 = %s\n", m_releasedate);
		printf("─────────────────────────────────────\n");
		printf("\n");
		
		}

		
		break;
	case 2:
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("                    2000년도 가요 차트                  \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
	
		EXEC SQL DECLARE m_year_chart_b CURSOR FOR
		select Music_Title, Music_Singer, Music_Genre, Music_releasedate
		from music
		where substr(Music_releasedate,3,2)  between 00 and 09
		order by Music_releasedate ;
	

		EXEC SQL OPEN m_year_chart_b;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_year_chart_b INTO
		:m_title: m_title_ind, :m_singer :m_singer_ind, :m_genre :m_genre_ind, :m_releasedate :m_releasedate_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("발매날짜 = %s\n", m_releasedate);
		printf("─────────────────────────────────────\n");
		printf("\n");
	          }
		
	        EXEC SQL CLOSE m_year_chart_b;
		break;

		
	case 3:
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("                    2010년도 가요 차트                  \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		EXEC SQL DECLARE m_year_chart_c CURSOR FOR
		select Music_Title, Music_Singer, Music_Genre, Music_releasedate
		from music
		where substr(Music_releasedate,3,2)  between 10 and 19
		order by Music_releasedate;
	

		EXEC SQL OPEN m_year_chart_c;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_year_chart_c INTO
		:m_title: m_title_ind, :m_singer :m_singer_ind, :m_genre :m_genre_ind, :m_releasedate :m_releasedate_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("발매날짜 = %s\n", m_releasedate);
		printf("─────────────────────────────────────\n");
		printf("\n");

		}
		EXEC SQL CLOSE m_year_chart_c;


		break;

	case 4: 
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("                2020년도 최신가요 차트                 \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		
		EXEC SQL DECLARE m_year_chart_d CURSOR FOR
		select Music_Title, Music_Singer, Music_Genre, Music_releasedate
		from music
		where substr(Music_releasedate,3,2) = 20
		order by Music_releasedate ;
	

		EXEC SQL OPEN m_year_chart_d;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_year_chart_d INTO
		:m_title: m_title_ind, :m_singer :m_singer_ind, :m_genre :m_genre_ind, :m_releasedate :m_releasedate_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("발매날짜 = %s\n", m_releasedate);
		printf("─────────────────────────────────────\n");
		printf("\n");

		}
		EXEC SQL CLOSE m_year_chart_d;

		break;
	       }
	  printf("\n");
	} while((y_select) != 5);
	system("cls");
}



void Get_Music_tuple()
{
	int numchoice;

EXEC SQL BEGIN DECLARE SECTION;
	char m_title[100]={""}; /*노래 제목*/
	char m_singer[30]={""}; /* 가수 */
	char m_genre[30]={""}; /*장르*/

	int m_playcount = 0;

	char title_temp[50];
	char singer_temp[50];
	char genre_temp[50];
 	short m_title_ind=0;
        short m_singer_ind=0;
        short m_genre_ind=0;
	short m_plcount_ind=0;
EXEC SQL END DECLARE SECTION;

do{
            printf("\n검색을 원하는 기준을 선택하세요.\n");
            printf("\n1. 노래 제목 2. 가수 이름 3. 장르 4. 이전으로 돌아가기\n");
            printf("\n선 택 : ");
            scanf("%d", &numchoice);

            // 1~4가 아닌 숫자를 사용자가 입력했을 시, 프로그램이 종료되게 함.
            if (numchoice != 1 && numchoice != 2 && numchoice != 3)
            {
               numchoice = 4;
            }

            // 숫자가 아닌 문자가 입력되었을 경우 프로그램이 종료되게 함.
            while(getchar()!='\n')
            {
               numchoice = 4;
            };

            printf("\n");

            switch(numchoice)
            {
//case 1            
        case 1:
	system("cls");
	printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
        /* 사용자 입력 */
	printf("검색할 음원을 입력하세요 : ");
  	scanf("%s", title_temp);
   	printf("\n");


EXEC SQL DECLARE music_print CURSOR FOR
      SELECT MUSIC_TITLE, MUSIC_SINGER, MUSIC_GENRE, MUSIC_PLAYCOUNT
      from music
      where music_title = :title_temp;

 EXEC SQL OPEN music_print;
   
EXEC SQL WHENEVER NOT FOUND DO BREAK;

                  for(int i = 0 ; i<50; i++)
                  {
	             
		      
                     EXEC SQL FETCH music_print INTO
                     :m_title:m_title_ind, :m_singer:m_singer_ind, :m_genre:m_genre_ind, m_playcount:m_plcount_ind;
                  
                     printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
                     printf("노래 제목 = %s\n", m_title);
	             printf("가수 = %s\n", m_singer);
                     printf("장르 = %s\n", m_genre);
 	             printf("재생 횟수 = %d\n", m_playcount);
                     printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
                     printf("\n");
	             EXEC SQL update music
		     set music_playcount = :m_playcount + 1
	    	     where music_title = :title_temp;
			
		     	
                  }

                  EXEC SQL CLOSE music_print;
	break;
//case 2
        case 2:
	system("cls");
	printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
        /* 사용자 입력 */
	printf("검색할 가수 이름을 입력하세요 : ");
  	scanf("%s", singer_temp);
   	printf("\n");

EXEC SQL DECLARE music_print_singer CURSOR FOR
      SELECT MUSIC_TITLE, MUSIC_SINGER, MUSIC_GENRE,MUSIC_PLAYCOUNT
      from music
      where music_singer = :singer_temp;

 EXEC SQL OPEN music_print_singer;
   
EXEC SQL WHENEVER NOT FOUND DO BREAK;

                  for(int i= 0 ; i<50; i++)
                  {
		     
                     EXEC SQL FETCH music_print_singer INTO
                     :m_title:m_title_ind, :m_singer:m_singer_ind, :m_genre:m_genre_ind, m_playcount:m_plcount_ind;
                  
                     printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
                     printf("노래 제목 = %s\n", m_title);
	             printf("가수 = %s\n", m_singer);
                     printf("장르 = %s\n", m_genre);
	             printf("재생 횟수 = %d\n", m_playcount);
                     printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
                     printf("\n");

		     EXEC SQL update music
		     set music_playcount = :m_playcount + 1
		     where music_title = :title_temp;	
		     
	    	     EXEC SQL COMMIT WORK ;   
                    	
                  }

                  EXEC SQL CLOSE music_print_singer;
	break;
//case 3
         case 3:
	 system("cls");
	 printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
     /* 사용자 입력 */
	 printf("검색할 장르를 입력하세요 : ");
  	 scanf("%s", genre_temp);
   	 printf("\n");

EXEC SQL DECLARE music_print_genre CURSOR FOR
      SELECT MUSIC_TITLE, MUSIC_SINGER, MUSIC_GENRE,MUSIC_PLAYCOUNT
      from music
      where music_genre = :genre_temp;

EXEC SQL OPEN music_print_genre;
   
EXEC SQL WHENEVER NOT FOUND DO BREAK;

                  for(int i= 0 ; i<50; i++)
                  {
                     EXEC SQL FETCH music_print_genre INTO
                     :m_title:m_title_ind, :m_singer:m_singer_ind, :m_genre:m_genre_ind, m_playcount:m_plcount_ind;
                  
                     printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
                     printf("노래 제목 = %s\n", m_title);
	             printf("가수 = %s\n", m_singer);
                     printf("장르 = %s\n", m_genre);
	             printf("재생 횟수 = %d\n", m_playcount);
                     printf("──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n");
                     printf("\n");
	             
		     EXEC SQL update music
		     set music_playcount = :m_playcount + 1
	             where music_title = :title_temp;
                     EXEC SQL COMMIT WORK ;  
	    	     	 		 
                  }

                  EXEC SQL CLOSE music_print_genre;
	break;
	}
           printf("\n");
         } while((numchoice) != 4);
	system("cls");
  
	EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");
}

void genre_chart()
{
/* --------------------------------------------------------------------------
   장르별 차트 
-------------------------------------------------------------------------- */

int genre_choice  ;
int scr_select ; 

EXEC SQL BEGIN DECLARE SECTION;
	int  m_num; /*노래 등록 번호*/
	char m_title[30] = { "" }; /*노래 제목*/
	char m_singer[20] = { "" }; /* 가수 */
	/*date m_releasedate; 일단 나중에(음원 출시날짜)*/
	char m_genre[10] = { "" }; /*장르*/
	char m_album[20] = { "" }; /*앨범이름*/
	int m_playcount; /*재생 빈도수*/

	short m_title_ind = 0;
	short m_singer_ind = 0;
	short m_genre_ind = 0;

EXEC SQL END DECLARE SECTION;


do{

	printf("장르를 선택해 주세요 \n");
	printf("────────────── \n");
	printf(" 1. 발라드 \n");
	printf(" 2. 팝송 \n");
	printf(" 3. 댄스 \n");
	printf(" 4. 인디 \n"); 
	printf(" 5. 힙합 \n");
	printf(" 6. 이전 메뉴로 돌아가기 \n");
	printf("────────────── \n");

	scanf("%d",&genre_choice);


// 1~4가 아닌 숫자를 사용자가 입력했을 시, 프로그램이 종료되게 함.
            if (genre_choice != 1 && genre_choice != 2 && genre_choice != 3 && genre_choice != 4 && genre_choice != 5)
            {
               genre_choice = 6;
            }

            // 숫자가 아닌 문자가 입력되었을 경우 프로그램이 종료되게 함.
            while(getchar()!='\n')
            {
               genre_choice = 6;
            };


         switch(genre_choice){
	case 1: 
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("             발라드 차트            \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");

		EXEC SQL DECLARE m_genre_chart_ballad CURSOR FOR
		SELECT Music_title, Music_singer, Music_genre
		from Music
		Where Music_genre = '발라드'	
		order by Music_PlayCount desc;
	

		EXEC SQL OPEN m_genre_chart_ballad;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_genre_chart_ballad INTO
		: m_title: m_title_ind, : m_singer : m_singer_ind, :m_genre : m_genre_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("─────────────────────────────────────\n");
		printf("\n");

		}
		EXEC SQL CLOSE m_genre_chart_ballad;

		break;
	case 2:
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("              팝송 차트             \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
			
		EXEC SQL DECLARE m_genre_chart_pop CURSOR FOR
		SELECT Music_title, Music_singer, Music_genre
		from Music
		Where Music_genre = '팝송'
		order by Music_PlayCount desc;
	

		EXEC SQL OPEN m_genre_chart_pop;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 20; i++)
		{
		EXEC SQL FETCH m_genre_chart_pop INTO
		: m_title: m_title_ind, : m_singer : m_singer_ind, :m_genre : m_genre_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("─────────────────────────────────────\n");
		printf("\n");

		}
		EXEC SQL CLOSE m_genre_chart_pop;
	
		break;
	case 3:
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("              댄스 차트             \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");

		EXEC SQL DECLARE m_genre_chart_dance CURSOR FOR
		SELECT Music_title, Music_singer, Music_genre
		from Music
		Where Music_genre = '댄스'
		order by Music_PlayCount desc;

		EXEC SQL OPEN m_genre_chart_dance;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_genre_chart_dance INTO
		: m_title: m_title_ind, : m_singer : m_singer_ind, :m_genre : m_genre_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("─────────────────────────────────────\n");
		printf("\n");

		}
		EXEC SQL CLOSE m_genre_chart_dance;

		break;
	case 4: 
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("              인디 차트             \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");

		EXEC SQL DECLARE m_genre_chart_indi CURSOR FOR
		SELECT Music_title, Music_singer, Music_genre
		from Music
		Where Music_genre = '인디'
		order by Music_PlayCount desc;
	

		EXEC SQL OPEN m_genre_chart_indi;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_genre_chart_indi INTO
		: m_title: m_title_ind, : m_singer : m_singer_ind, :m_genre : m_genre_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("─────────────────────────────────────\n");
		printf("\n");

		}
		EXEC SQL CLOSE m_genre_chart_indi;

		break;
	case 5:
		system("cls");
		printf("■■■■■■■■■■■■■■■■■■\n");
		printf("\n");
		printf("              힙합 차트             \n");
		printf("\n");
		printf("■■■■■■■■■■■■■■■■■■\n");
		EXEC SQL DECLARE m_genre_chart_hiphop CURSOR FOR
		SELECT Music_title, Music_singer, Music_genre
		from Music
		Where Music_genre = '힙합'
		order by Music_PlayCount desc;
	

		EXEC SQL OPEN m_genre_chart_hiphop;

		EXEC SQL WHENEVER NOT FOUND DO BREAK;
		for (int i = 0; i < 50; i++)
		{
		EXEC SQL FETCH m_genre_chart_hiphop INTO
		: m_title: m_title_ind, : m_singer : m_singer_ind, :m_genre : m_genre_ind;

		printf("─────────────────────────────────────\n");
		printf("노래 제목 = %s\n", m_title);
		printf("가수 = %s\n", m_singer);
		printf("장르 = %s\n", m_genre);
		printf("─────────────────────────────────────\n");
		printf("\n");

		}
		EXEC SQL CLOSE m_genre_chart_hiphop;

		break;
	       }
	    printf("\n");
	  } while((genre_choice) != 6);
	    system("cls");

}


void top_chart()
{

EXEC SQL BEGIN DECLARE SECTION;
	int  m_num; /*노래 등록 번호*/
	char m_title[100] = { "" }; /*노래 제목*/
	char m_singer[20] = { "" }; /* 가수 */
	char m_releasedate [20] ={ "" };
	char m_genre[20] = { "" }; /*장르*/
	char m_album[20] = { "" }; /*앨범이름*/
	int m_playcount; /*재생 빈도수*/

	short m_title_ind = 0;
	short m_singer_ind = 0;
	short m_playcount_ind = 0;
EXEC SQL END DECLARE SECTION;

/* Top 차트 */
EXEC SQL DECLARE m_playcount_ranking CURSOR FOR
	SELECT Music_title, Music_singer, Music_playcount
	from Music
	order by Music_playcount desc;

EXEC SQL OPEN m_playcount_ranking;

EXEC SQL WHENEVER NOT FOUND DO BREAK;

/* 일단 3개만*/
for (int i = 1; i < 31; i++)
{
	EXEC SQL FETCH m_playcount_ranking INTO
		: m_title: m_title_ind, : m_singer : m_singer_ind, :m_playcount : m_playcount_ind;

	printf("─────────────────────────────────────\n");
	printf("◆◆◆%d 위◆◆◆ \n", i);
	printf("노래 제목 = %s\n", m_title);
	printf("가수 = %s\n", m_singer);
	printf("재생 횟수 = %d 회 \n", m_playcount);
	printf("─────────────────────────────────────\n");
	printf("\n");
}
EXEC SQL CLOSE m_playcount_ranking;
}

/* --------------------------------------------------------------------------
void sql_error(msg)

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char *msg)

{
    char err_msg[128];
    size_t buf_len, msg_len;

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    printf("\n%s\n", msg);
    buf_len = sizeof (err_msg);
    sqlglm(err_msg, &buf_len, &msg_len);
    printf("%.*s\n", msg_len, err_msg);
    getch();
    
    EXEC SQL ROLLBACK WORK;

}


